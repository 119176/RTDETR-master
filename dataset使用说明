visdrone数据集：
数据集原始文件存储在visdrone中
第一步，将visdrone转换成voc：
visdrone数据集：
    -- VisDrone2019-DET-train  # 存储visdrone标签和voc格式标签，执行visdrone_to_voc.py脚本
        --annotation
        --voc
        --images
    -- VisDrone2019-DET-val  # 存储visdrone标签和voc格式标签,执行visdrone_to_voc.py脚本
        --annotation
        --voc
        --images
    txt_folder = '/home/class1/work/zhangnan/RTDETR-master/dataset/test/annotations'  # visdrone txt标签文件夹
    img_folder = '/home/class1/work/zhangnan/RTDETR-master/dataset/test/images'  # visdrone 照片所在文件夹
    xml_save_path = '/home/class1/work/zhangnan/RTDETR-master/dataset/test/voc'  # 生成的xml文件存储的文件夹

第二步：将voc转换成yolo：
使用xml2txt.py脚本
visdrone数据集：
    -- VisDrone2019-DET-train  # 存储visdrone标签和voc格式标签，执行visdrone_to_voc.py脚本
        --annotation
        --voc
        --images
        --yolo
    -- VisDrone2019-DET-val  # 存储visdrone标签和voc格式标签,执行visdrone_to_voc.py脚本
        --annotation
        --voc
        --images
        --yolo
    imgpath = '/home/class1/work/zhangnan/RTDETR-master/dataset/VisDrone2019-DET-test-dev/images'
    xmlpath = '/home/class1/work/zhangnan/RTDETR-master/dataset/VisDrone2019-DET-test-dev/voc'
    txtpath = '/home/class1/work/zhangnan/RTDETR-master/dataset/VisDrone2019-DET-test-dev/yolo'

第三步：将images放入到dataset/images中，将yolo放入dataset/labels中
    --labels
        --train
        --val
        --test
    --images中
        --train
        --val
        --test
类别['ignored regions', 'pedestrian', 'people', 'bicycle', 'car', 'van', 'truck', 'tricycle', 'awning-tricycle', 'bus', 'motor', 'others']

dota数据集：
    DOTA数据集介绍：
    DOTA 是一个用于航拍图像中物体检测的大型数据集。它可用于开发和评估航拍图像中的物体检测器。
    图像是从不同的传感器和平台收集的。每张图像的大小范围从 800 × 800 到 20,000 × 20,000 像素，包含具有各种比例、方向和形状的物体。
    DO​​TA 图像中的实例由航拍图像解释专家通过任意（8 自由度）四边形进行注释。我们将继续更新 DOTA，现在它有三个版本：
    DOTA-v1.0包含15个常见类别，2806张图片，188282个实例，其中训练集、验证集、测试集的比例分别为1/2、1/6、1/3。
    DOTA-v1.5 使用与 DOTA-v1.0 相同的图像，但极小的实例（小于 10 像素）也进行了注释。此外，还添加了一个新类别“集装箱起重机”。
    它总共包含 403,318 个实例。图像数量和数据集分割与 DOTA-v1.0 相同。
    DOTA-v2.0 收集了更多的 Google Earth、GF-2 卫星和航拍图像，
    共有 18 个常见类别，11,268 张图片和 1,793,658 个实例。相比 DOTA-v1.5，还增加了“机场”和“直升机停机坪”等新类别。
    DOTA 的 11,268 张图片被分为训练集、验证集、测试开发集和测试挑战集。
    为避免过拟合问题，训练集和验证集的比例小于测试集。此外，我们还有两个测试集，分别是测试开发集和测试挑战集。
    训练集包含 1,830 张图片和 268,627 个实例。验证集包含 593 张图片和 81,048 个实例。我们发布了训练集和验证集的图片和基本事实。
    测试开发集包含 2,792 张图片和 353,346 个实例。我们发布了图片，但没有发布基本事实。测试挑战包含 6,053 张图片和 1,090,637 个实例。

    本实验使用的是DOTAv1.0，首先将obb格式转换为yolo格式，再进行分割，分割成1024*1024 训练集得到28464张图像,执行脚本：
    （1）转yolo
    python -m dataset.dota_yolo
        --DOTAv1.0：
            --images：
                --train
                --val
            --labels：
                --train_origion
                --val_origion
    修改convert_dota_to_yolo_obb类别为
        class_mapping = {
        "plane": 0,
        "baseball-diamond": 1,
        "bridge": 2,
        "ground-track-field": 3,
        "small-vehicle": 4,
        "large-vehicle": 5,
        "ship": 6,
        "tennis-court": 7,
        "basketball-court": 8,
        "storage-tank": 9,
        "soccer-ball-field": 10,
        "roundabout": 11,
        "harbor": 12,
        "swimming-pool": 13,
        "helicopter": 14,}

    （2）分割
    由于数据集太大，分割
    python -m dataset.split_dota
    最终数据集存储在/home/class1/work/zhangnan/RTDETR-master/dataset/DOTAv1.0-split1
; 数据集原始文件存在DOTA中
; 直接使用脚本dota_yolo.py会自动将dota转换成yolo，注意要使用v2.0
; 格式如下
;     --DOTA：
;         --images：
;             --train
;             --val
;         --labels：
;             --train_origion
;             --val_origion
; 由于DOTA数据集过于大 需要进行分割，运行dataset/split_dota.py
;     --DOTA_split：
;         --images：
;             --train
;             --val
;         --labels：
;             --train
;             --val
    
            
; dota数据集：
; 数据集原始文件存在DOTA中
; 第一步：由于原图尺寸太大，首先需要切割数据集，使用dota_to_voc.py脚本
;     --DOTA：
;         --train:
;             --images
;             --obb # dota标签
;             --voc # voc标签
;         --val:
;             --images
;             --obb # dota标签
;             --voc # voc标签
; raw_images_dir = '/home/class1/work/zhangnan/RTDETR-master/dataset/test/images'
; raw_label_dir = '/home/class1/work/zhangnan/RTDETR-master/dataset/test/obb'
; save_dir = '/home/class1/work/zhangnan/RTDETR-master/dataset/test/voc'
; 937.0 913.0 921.0 912.0 923.0 874.0 940.0 875.0 small-vehicle 0
; 边界框的四个顶点坐标
; 第二步：将空标签的图片删除



